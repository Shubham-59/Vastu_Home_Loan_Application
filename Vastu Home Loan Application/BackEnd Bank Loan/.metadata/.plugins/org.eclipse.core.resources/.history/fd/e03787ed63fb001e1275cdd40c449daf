package com.vashtu.app.serviceImpl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vashtu.app.enums.Status;
import com.vashtu.app.model.AllPersonalDocuments;
import com.vashtu.app.model.Customer;
import com.vashtu.app.model.Enquiry;
import com.vashtu.app.model.MortageDetails;
import com.vashtu.app.model.Profession;
import com.vashtu.app.repository.customerServiceRepository;
import com.vashtu.app.service.customerService;

@Service
public class customerServiceImpl implements customerService {
	
	@Autowired private customerServiceRepository customerRepo;
	
//	@Autowired private RestTemplate restTemplate;

	@Override
	public Customer  saveCustomerData(String customerDataJson, MultipartFile addressProof,
			MultipartFile pancard, MultipartFile incomeTax, MultipartFile aadharCard, MultipartFile photo,
			MultipartFile signature, MultipartFile salarySlips, MultipartFile mortgagePropertyProof,
			MultipartFile mortgagePropertyInsurance, MultipartFile professionSalarySlips) 
	{
		
		ObjectMapper mapper = new ObjectMapper();
	    Customer customer = new Customer();

	    try {

	        customer = mapper.readValue(customerDataJson, Customer.class);
	        // Set the status after deserialization
	        
	       
	        customer.setStatus(Status.ForwardedToCM);

	        // Initialize nested objects if null
	        if (customer.getAllPersonalDocuments() == null) {
	            customer.setAllPersonalDocuments(new AllPersonalDocuments());
	        }
	        if (customer.getMortagedetails() == null) {
	            customer.setMortagedetails(new MortageDetails());
	        }
	        if (customer.getProfession() == null) {
	            customer.setProfession(new Profession());
	        }

	        // Set document image data if available
	        customer.getAllPersonalDocuments().setAddressProof(addressProof.getBytes());
	        customer.getAllPersonalDocuments().setPanCard(pancard.getBytes());
	        customer.getAllPersonalDocuments().setIncomeTax(incomeTax.getBytes());
	        customer.getAllPersonalDocuments().setAadharCard(aadharCard.getBytes());
	        customer.getAllPersonalDocuments().setPhoto(photo.getBytes());
	        customer.getAllPersonalDocuments().setSignature(signature.getBytes());
	        customer.getAllPersonalDocuments().setSalarySlips(salarySlips.getBytes());
	        customer.getMortagedetails().setMortgagePropertyProof(mortgagePropertyProof.getBytes());
	        customer.getMortagedetails().setMortgagePropertyInsurance(mortgagePropertyInsurance.getBytes());
	        customer.getProfession().setProfessionSalarySlips(professionSalarySlips.getBytes());
//     
//	        String url = "http://localhost:8081/enquiry/updateStatusCM/{enquiryId}";
//	 restTemplate.put(url, Customer.class,customer.getEnquiry().getEnquiryId()); 
//	
	        // Save customer data
	        customerRepo.save(customer);

	    } catch (IOException e) {
	        e.printStackTrace();
	        
	    }

	    return customer;
	}


	@Override
	public List<Customer> getAllLoanApplicationData() {
		List<Customer> customer=customerRepo.findAll();
		return customer;
	}


	@Override
	public Customer updateStatusApprovedLoan(int id) {
	    Optional<Customer> opCustomer = customerRepo.findById(id);
	    if (opCustomer.isPresent()) {
	        Customer customer = opCustomer.get();
	        customer.setStatus(Status.ApprovedLoan); // Assuming 'Status' is an enum
	        return customerRepo.save(customer);
	    } else {
	        throw new RuntimeException("Customer not found with ID: " + id);
	    }
	}

	@Override
	public Customer getCustomerById(int customerId) {
		
		Optional<Customer> opCustomer = customerRepo.findById(customerId);
        
        if (opCustomer.isPresent()) {
            Customer customer = opCustomer.get();
            return customer;
        }
		return null;
	}


/*
 * @Override public List<Customer> getAllApprovedLoanApplication(Status status)
 * { List<Customer> allCustomers = customerRepo.findAll(); List<Customer>
 * approvedCustomers = new ArrayList<>();
 * 
 * for (Customer customer : allCustomers) { if (customer.getStatus() == status)
 * { approvedCustomers.add(customer); } }
 * 
 * return approvedCustomers; }
 * 
 * }
 */
	@Override
	public List<Customer> getAllApprovedLoanApplication(Status status) {
	    List<Customer> approvedCustomers = customerRepo.findByStatus(status);
	    return approvedCustomers;
	}


	@Override
	public Customer updateStatusAsLoanRejected(int id) {
		Optional<Customer>opCustomer=customerRepo.findById(id);
		if(opCustomer.isPresent())
		{
			Customer customer=opCustomer.get();
			customer.setStatus(Status.RejectedLoan);
         	return customerRepo.save(customer);
		}
		
		return null;
	}

	@Override
    public Optional<Customer> getApprovedLoanById(int id) {
        Optional<Customer> opCustomer = customerRepo.findById(id);
        return opCustomer.filter(customer -> customer.getStatus() == Status.ApprovedLoan);
    }


	@Override
	public List<Customer> getAllApprovedLoanApplication() {
		List<Customer> customer=customerRepo.findAll();
		List<Customer> approvedLoanList =new ArrayList<>();
		for(Customer filterCustomer:customer) 
		{
			if(filterCustomer.getStatus()==Status.ApprovedLoan)
			{
				approvedLoanList.add(filterCustomer);
				return approvedLoanList;1
			}
			
		}
		return null;
	}
}
/*
 * @Override public Customer getApprovedLoanById(int id) {
 * Optional<Customer>opCustomer=customerRepo.findById(id); if
 * (opCustomer.isPresent()) { Customer customer = opCustomer.get(); if
 * (customer.getStatus() == Status.ApprovedLoan) { return customer; } else {
 * return null; // Return null if status is not ApprovedLoan } } else { return
 * null; } }}
 */
	

//	@Override
//	public Customer saveCustomerData(Customer customer) {
//		
//		return customerRepo.save(customer);
//	}

